/*!
 * devextreme-angular
 * Version: 21.2.3
 * Build date: Thu Oct 28 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoGanttHeaderFilterTexts } from './base/gantt-header-filter-texts';
var DxoTextsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoTextsComponent, _super);
    function DxoTextsComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxoTextsComponent.prototype, "_optionPath", {
        get: function () {
            return 'texts';
        },
        enumerable: true,
        configurable: true
    });
    DxoTextsComponent.prototype.ngOnInit = function () {
        this._addRecreatedComponent();
    };
    DxoTextsComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._getOptionPath());
    };
    DxoTextsComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxoTextsComponent = tslib_1.__decorate([
        Component({
            selector: 'dxo-texts',
            template: '',
            providers: [NestedOptionHost],
            inputs: [
                'fix',
                'leftPosition',
                'rightPosition',
                'unfix',
                'addRow',
                'cancelAllChanges',
                'cancelRowChanges',
                'confirmDeleteMessage',
                'confirmDeleteTitle',
                'deleteRow',
                'editRow',
                'saveAllChanges',
                'saveRowChanges',
                'undeleteRow',
                'validationCancelChanges',
                'exportAll',
                'exportSelectedRows',
                'exportTo',
                'clearFilter',
                'createFilter',
                'filterEnabledHint',
                'groupByThisColumn',
                'groupContinuedMessage',
                'groupContinuesMessage',
                'ungroup',
                'ungroupAll',
                'cancel',
                'emptyValue',
                'ok',
                'avg',
                'avgOtherColumn',
                'count',
                'max',
                'maxOtherColumn',
                'min',
                'minOtherColumn',
                'sum',
                'sumOtherColumn',
                'allFields',
                'columnFields',
                'dataFields',
                'filterFields',
                'rowFields',
                'columnFieldArea',
                'dataFieldArea',
                'filterFieldArea',
                'rowFieldArea',
                'collapseAll',
                'dataNotAvailable',
                'expandAll',
                'exportToExcel',
                'grandTotal',
                'noData',
                'removeAllSorting',
                'showFieldChooser',
                'sortColumnBySummary',
                'sortRowBySummary',
                'total',
                'addRowToNode'
            ],
            styles: ['']
        }),
        tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoTextsComponent);
    return DxoTextsComponent;
}(DxoGanttHeaderFilterTexts));
export { DxoTextsComponent };
var DxoTextsModule = /** @class */ (function () {
    function DxoTextsModule() {
    }
    DxoTextsModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                DxoTextsComponent
            ],
            exports: [
                DxoTextsComponent
            ],
        })
    ], DxoTextsModule);
    return DxoTextsModule;
}());
export { DxoTextsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkLyIsInNvdXJjZXMiOlsidGV4dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7O0FBRUgsb0NBQW9DO0FBRXBDLGlEQUFpRDtBQUVqRCxPQUFPLEVBQ0gsU0FBUyxFQUdULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFDSCxnQkFBZ0IsR0FDbkIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQXNFN0U7SUFBdUMsNkNBQXlCO0lBTzVELDJCQUFnQyxnQkFBa0MsRUFDbEQsVUFBNEI7UUFENUMsWUFFSSxpQkFBTyxTQUdWO1FBRkcsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEtBQUksQ0FBQyxDQUFDO1FBQ3ZDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSSxFQUFFLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUM7O0lBQzlELENBQUM7SUFWRCxzQkFBYywwQ0FBVzthQUF6QjtZQUNJLE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBV0Qsb0NBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCx1Q0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7O2dCQWRpRCxnQkFBZ0IsdUJBQXJELFFBQVEsWUFBSSxJQUFJO2dCQUNELGdCQUFnQix1QkFBbkMsSUFBSTs7SUFSSixpQkFBaUI7UUFuRTdCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLFFBQVEsRUFBRSxFQUFFO1lBRVosU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7WUFDN0IsTUFBTSxFQUFFO2dCQUNKLEtBQUs7Z0JBQ0wsY0FBYztnQkFDZCxlQUFlO2dCQUNmLE9BQU87Z0JBQ1AsUUFBUTtnQkFDUixrQkFBa0I7Z0JBQ2xCLGtCQUFrQjtnQkFDbEIsc0JBQXNCO2dCQUN0QixvQkFBb0I7Z0JBQ3BCLFdBQVc7Z0JBQ1gsU0FBUztnQkFDVCxnQkFBZ0I7Z0JBQ2hCLGdCQUFnQjtnQkFDaEIsYUFBYTtnQkFDYix5QkFBeUI7Z0JBQ3pCLFdBQVc7Z0JBQ1gsb0JBQW9CO2dCQUNwQixVQUFVO2dCQUNWLGFBQWE7Z0JBQ2IsY0FBYztnQkFDZCxtQkFBbUI7Z0JBQ25CLG1CQUFtQjtnQkFDbkIsdUJBQXVCO2dCQUN2Qix1QkFBdUI7Z0JBQ3ZCLFNBQVM7Z0JBQ1QsWUFBWTtnQkFDWixRQUFRO2dCQUNSLFlBQVk7Z0JBQ1osSUFBSTtnQkFDSixLQUFLO2dCQUNMLGdCQUFnQjtnQkFDaEIsT0FBTztnQkFDUCxLQUFLO2dCQUNMLGdCQUFnQjtnQkFDaEIsS0FBSztnQkFDTCxnQkFBZ0I7Z0JBQ2hCLEtBQUs7Z0JBQ0wsZ0JBQWdCO2dCQUNoQixXQUFXO2dCQUNYLGNBQWM7Z0JBQ2QsWUFBWTtnQkFDWixjQUFjO2dCQUNkLFdBQVc7Z0JBQ1gsaUJBQWlCO2dCQUNqQixlQUFlO2dCQUNmLGlCQUFpQjtnQkFDakIsY0FBYztnQkFDZCxhQUFhO2dCQUNiLGtCQUFrQjtnQkFDbEIsV0FBVztnQkFDWCxlQUFlO2dCQUNmLFlBQVk7Z0JBQ1osUUFBUTtnQkFDUixrQkFBa0I7Z0JBQ2xCLGtCQUFrQjtnQkFDbEIscUJBQXFCO2dCQUNyQixrQkFBa0I7Z0JBQ2xCLE9BQU87Z0JBQ1AsY0FBYzthQUNqQjtxQkE5RFEsRUFBRTtTQStEZCxDQUFDO1FBUWUsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxJQUFJLEVBQUUsQ0FBQTtRQUN0QixtQkFBQSxJQUFJLEVBQUUsQ0FBQTtpREFEbUMsZ0JBQWdCO1lBQ3RDLGdCQUFnQjtPQVJuQyxpQkFBaUIsQ0F3QjdCO0lBQUQsd0JBQUM7Q0FBQSxBQXhCRCxDQUF1Qyx5QkFBeUIsR0F3Qi9EO1NBeEJZLGlCQUFpQjtBQWtDOUI7SUFBQTtJQUE4QixDQUFDO0lBQWxCLGNBQWM7UUFSMUIsUUFBUSxDQUFDO1lBQ1IsWUFBWSxFQUFFO2dCQUNaLGlCQUFpQjthQUNsQjtZQUNELE9BQU8sRUFBRTtnQkFDUCxpQkFBaUI7YUFDbEI7U0FDRixDQUFDO09BQ1csY0FBYyxDQUFJO0lBQUQscUJBQUM7Q0FBQSxBQUEvQixJQUErQjtTQUFsQixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDIxLjIuM1xuICogQnVpbGQgZGF0ZTogVGh1IE9jdCAyOCAyMDIxXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMSBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciAqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE9uSW5pdCxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIE5nTW9kdWxlLFxyXG4gICAgSG9zdCxcclxuICAgIFNraXBTZWxmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuaW1wb3J0IHtcclxuICAgIE5lc3RlZE9wdGlvbkhvc3QsXHJcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeG9HYW50dEhlYWRlckZpbHRlclRleHRzIH0gZnJvbSAnLi9iYXNlL2dhbnR0LWhlYWRlci1maWx0ZXItdGV4dHMnO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkeG8tdGV4dHMnLFxyXG4gICAgdGVtcGxhdGU6ICcnLFxyXG4gICAgc3R5bGVzOiBbJyddLFxyXG4gICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXHJcbiAgICBpbnB1dHM6IFtcclxuICAgICAgICAnZml4JyxcclxuICAgICAgICAnbGVmdFBvc2l0aW9uJyxcclxuICAgICAgICAncmlnaHRQb3NpdGlvbicsXHJcbiAgICAgICAgJ3VuZml4JyxcclxuICAgICAgICAnYWRkUm93JyxcclxuICAgICAgICAnY2FuY2VsQWxsQ2hhbmdlcycsXHJcbiAgICAgICAgJ2NhbmNlbFJvd0NoYW5nZXMnLFxyXG4gICAgICAgICdjb25maXJtRGVsZXRlTWVzc2FnZScsXHJcbiAgICAgICAgJ2NvbmZpcm1EZWxldGVUaXRsZScsXHJcbiAgICAgICAgJ2RlbGV0ZVJvdycsXHJcbiAgICAgICAgJ2VkaXRSb3cnLFxyXG4gICAgICAgICdzYXZlQWxsQ2hhbmdlcycsXHJcbiAgICAgICAgJ3NhdmVSb3dDaGFuZ2VzJyxcclxuICAgICAgICAndW5kZWxldGVSb3cnLFxyXG4gICAgICAgICd2YWxpZGF0aW9uQ2FuY2VsQ2hhbmdlcycsXHJcbiAgICAgICAgJ2V4cG9ydEFsbCcsXHJcbiAgICAgICAgJ2V4cG9ydFNlbGVjdGVkUm93cycsXHJcbiAgICAgICAgJ2V4cG9ydFRvJyxcclxuICAgICAgICAnY2xlYXJGaWx0ZXInLFxyXG4gICAgICAgICdjcmVhdGVGaWx0ZXInLFxyXG4gICAgICAgICdmaWx0ZXJFbmFibGVkSGludCcsXHJcbiAgICAgICAgJ2dyb3VwQnlUaGlzQ29sdW1uJyxcclxuICAgICAgICAnZ3JvdXBDb250aW51ZWRNZXNzYWdlJyxcclxuICAgICAgICAnZ3JvdXBDb250aW51ZXNNZXNzYWdlJyxcclxuICAgICAgICAndW5ncm91cCcsXHJcbiAgICAgICAgJ3VuZ3JvdXBBbGwnLFxyXG4gICAgICAgICdjYW5jZWwnLFxyXG4gICAgICAgICdlbXB0eVZhbHVlJyxcclxuICAgICAgICAnb2snLFxyXG4gICAgICAgICdhdmcnLFxyXG4gICAgICAgICdhdmdPdGhlckNvbHVtbicsXHJcbiAgICAgICAgJ2NvdW50JyxcclxuICAgICAgICAnbWF4JyxcclxuICAgICAgICAnbWF4T3RoZXJDb2x1bW4nLFxyXG4gICAgICAgICdtaW4nLFxyXG4gICAgICAgICdtaW5PdGhlckNvbHVtbicsXHJcbiAgICAgICAgJ3N1bScsXHJcbiAgICAgICAgJ3N1bU90aGVyQ29sdW1uJyxcclxuICAgICAgICAnYWxsRmllbGRzJyxcclxuICAgICAgICAnY29sdW1uRmllbGRzJyxcclxuICAgICAgICAnZGF0YUZpZWxkcycsXHJcbiAgICAgICAgJ2ZpbHRlckZpZWxkcycsXHJcbiAgICAgICAgJ3Jvd0ZpZWxkcycsXHJcbiAgICAgICAgJ2NvbHVtbkZpZWxkQXJlYScsXHJcbiAgICAgICAgJ2RhdGFGaWVsZEFyZWEnLFxyXG4gICAgICAgICdmaWx0ZXJGaWVsZEFyZWEnLFxyXG4gICAgICAgICdyb3dGaWVsZEFyZWEnLFxyXG4gICAgICAgICdjb2xsYXBzZUFsbCcsXHJcbiAgICAgICAgJ2RhdGFOb3RBdmFpbGFibGUnLFxyXG4gICAgICAgICdleHBhbmRBbGwnLFxyXG4gICAgICAgICdleHBvcnRUb0V4Y2VsJyxcclxuICAgICAgICAnZ3JhbmRUb3RhbCcsXHJcbiAgICAgICAgJ25vRGF0YScsXHJcbiAgICAgICAgJ3JlbW92ZUFsbFNvcnRpbmcnLFxyXG4gICAgICAgICdzaG93RmllbGRDaG9vc2VyJyxcclxuICAgICAgICAnc29ydENvbHVtbkJ5U3VtbWFyeScsXHJcbiAgICAgICAgJ3NvcnRSb3dCeVN1bW1hcnknLFxyXG4gICAgICAgICd0b3RhbCcsXHJcbiAgICAgICAgJ2FkZFJvd1RvTm9kZSdcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIER4b1RleHRzQ29tcG9uZW50IGV4dGVuZHMgRHhvR2FudHRIZWFkZXJGaWx0ZXJUZXh0cyBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0ICB7XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldCBfb3B0aW9uUGF0aCgpIHtcclxuICAgICAgICByZXR1cm4gJ3RleHRzJztcclxuICAgIH1cclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoQFNraXBTZWxmKCkgQEhvc3QoKSBwYXJlbnRPcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBASG9zdCgpIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHBhcmVudE9wdGlvbkhvc3Quc2V0TmVzdGVkT3B0aW9uKHRoaXMpO1xyXG4gICAgICAgIG9wdGlvbkhvc3Quc2V0SG9zdCh0aGlzLCB0aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5fYWRkUmVjcmVhdGVkQ29tcG9uZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fYWRkUmVtb3ZlZE9wdGlvbih0aGlzLl9nZXRPcHRpb25QYXRoKCkpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBEeG9UZXh0c0NvbXBvbmVudFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgRHhvVGV4dHNDb21wb25lbnRcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHhvVGV4dHNNb2R1bGUgeyB9XHJcbiJdfQ==